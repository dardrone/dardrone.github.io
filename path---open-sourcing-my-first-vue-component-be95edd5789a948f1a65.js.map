{"version":3,"sources":["webpack:///path---open-sourcing-my-first-vue-component-be95edd5789a948f1a65.js","webpack:///./.cache/json/open-sourcing-my-first-vue-component.json"],"names":["webpackJsonp","488","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,oBAAsDC,gBAAmBC,GAAA,qJAAAC,KAAA,4nkBAAkndC,aAAsoIL,MAAA,uCAAAM,KAAA,uBAA4EC,aAAgBC,KAAA","file":"path---open-sourcing-my-first-vue-component-be95edd5789a948f1a65.js","sourcesContent":["webpackJsonp([39229934126351],{\n\n/***/ 488:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Darren Jennings\",\"author\":\"Darren Jennings\"}},\"markdownRemark\":{\"id\":\"/Users/darrenjennings/source/repos/darrenjennings.github.io/src/pages/2017-12-01-first-open-source-vue/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<blockquote>\\n<p><strong>tl;dr</strong> I‚Äôm open sourced vue-autosuggest, and wrote about it. Check out the <a href=\\\"https://medium.com/@darrenjennings/open-sourcing-your-first-vue-component-5ef015e1f66c\\\" target=\\\"_blank\\\">medium post</a> and the <a href=\\\"https://www.github.com/Educents/vue-autosuggest\\\" target=\\\"_blank\\\">source code.</a></p>\\n</blockquote>\\n<img style=\\\"margin-bottom:0;\\\" src=\\\"/vueautosuggest_educents-edd010938a1ef2c17db67a5833d4cc60.gif\\\" class=\\\"shadow\\\" alt=\\\"vue-autosuggest on Educents.\\\"/>\\n<p style=\\\"text-align: center;\\\">\\n<em style=\\\"font-size:0.75em; margin-bottom:1.45rem;\\\">Vue-autosuggest in the wild on <a href=\\\"https://www.educents.com/\\\" target=\\\"_blank\\\">Educents.com</a></em>\\n</p>\\n<p>In case you‚Äôre new to <a href=\\\"https://vuejs.org\\\">Vue</a>, it‚Äôs an awesome javascript front-end framework that makes writing reusable, testable UI components a breeze! I <a href=\\\"https://medium.com/@darrenjennings/data-driven-vue-js-53e84f16e28f\\\">recently wrote</a> about how I love Vue‚Äôs data-driven design and second-to-none documentation. However, I wanted to write about my experience with open sourcing my first Vue component in the spirit of <a href=\\\"https://hacktoberfest.digitalocean.com/stats/darrenjennings\\\">Hacktoberfest</a>. Here‚Äôs what I found helpful traversing the mire.</p>\\n<h2>Before you begin, pick a component you already¬†need!</h2>\\n<p>It‚Äôs always a good idea to contribute to Open Source Software <a href=\\\"https://twitter.com/search?q=%23OSS\\\">#OSS</a> by solving a problem that you already have. As <a href=\\\"https://medium.com/r/?url=https%3A%2F%2Fmxstbr.blog%2F2017%2F02%2Fcreating-open-source-projects%2F\\\">Max Stoiber says</a>, open source is a byproduct of solving problems. If you‚Äôre already building reusable components, why not make them available for everyone and learn some things in the process? If your components seem too tightly coupled to your application structure, maybe it‚Äôs time to ask ‚ÄúWhat do I need to do to open source this?‚Äù At Educents, we built an autosuggest component that would be flexible enough to eventually abstract for general use cases while still solving our real problems‚Ä¶ and then we open-sourced it!</p>\\n<h2>Grab a¬†Template</h2>\\n<p>Look at existing Vue projects for suggested structures for your github project. Here are some mature projects we used as templates when writing a plugin:</p>\\n<ul>\\n<li>For plugins in the wild, checkout Algolia‚Äôs instant search component or Freek Van der Herten/Spatie‚Äôs vue table component</li>\\n<li>For testing help check out <a href=\\\"https://github.com/vuejs/vue-test-utils-jest-example\\\">vue-test-utils-jest-example</a></li>\\n<li>For general OSS project scaffolding, look at Kent C. Dodds‚Äô <a href=\\\"https://github.com/kentcdodds/kcd-scripts\\\">kcd-scripts</a></li>\\n</ul>\\n<p>Of course you should also read the official docs for an overview on how plugins in Vue work.\\nIf you‚Äôre already segmenting your UI library into prop-driven components, then open sourcing a component isn‚Äôt much more than a simple index.js script with an <code>install()</code> method.</p>\\n<p>Here is an example from a fictitious plugin called VueToAKill.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> VueToAKill <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./VueToAKill.vue\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> VueToAKillLib <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">install</span><span class=\\\"token punctuation\\\">(</span>Vue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">component</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"vue-to-a-kill\\\"</span><span class=\\\"token punctuation\\\">,</span> VueToAKill<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> VueToAKillLib<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> window <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"undefined\\\"</span> <span class=\\\"token operator\\\">&amp;&amp;</span> window<span class=\\\"token punctuation\\\">.</span>Vue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  window<span class=\\\"token punctuation\\\">.</span>Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>VueToAKillLib<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Build Your Vue Component for the¬†masses</h2>\\n<p>You need to get your component into a single consumable file. Webpack, rollup, something else? Not much to say here except that I was familiar with Webpack so I went that direction. It‚Äôs worth noting that Rollup seems to be more popular as the Vue and React teams both use it to bundle their main libraries.</p>\\n<p>Webpack example partial config (full example config):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>output: {\\n    path: path.resolve(__dirname, \\\"../dist\\\"),\\n    filename: \\\"[name].js\\\",\\n    library: \\\"VueToAKill\\\",\\n    libraryTarget: \\\"umd\\\" // you can build for commonjs also\\n},</code></pre>\\n      </div>\\n<p>Naming the libary e.g. VueToAKill will give you the ability to reference the library outside of a build tool, such as JSFiddle, or you can autoload the plugin for users inside your install load (as demonstrated in index.js Gist code block on lines 11‚Äì13 above). If you include it in a script tag, you can simple load it into your Vue app like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>VueToAKill<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Once your lib is on npm, loading the plugin as a module in your build tools (such as webpack), is as simple as installing and importing:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> VueToAKill <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue-to-a-kill'</span><span class=\\\"token punctuation\\\">;</span> \\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>VueToAKill<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Test Your Vue Component</h2>\\n<p>Vue testing has a great library, vue-test-utils (recently migrated from the popular lib avioraz), and it is being actively developed. While still in beta at the time of this article, we found it worked well and gives you a testing tool belt akin to Enzyme (for React ‚ù§Ô∏è), and can be easily integrated into existing testing tools such as Jest or Mocha. It has shallow mounting of components, and server side rendered snapshots for üì∏ snapshot testing. We even filed an issue we discovered while testing and the maintainer responded within a few hours with a commit fixing the issue.</p>\\n<p>Check out an example test on our VueToAKill component. I‚Äôm rendering the component, and checking that the agents prop I‚Äôm passing is rendered in the result Vue html with the desired number of <code>&#x3C;li></code> tags.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> shallow <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"vue-test-utils\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createRenderer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"vue-server-renderer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> VueToAKill <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../src/VueToAKill.vue\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  agents<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'James Bond'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Alec Trevelyan'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'M'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Q'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  licenseToKill<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"can mount\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> defaultProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  props<span class=\\\"token punctuation\\\">.</span>licenseToKill <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span>VueToAKill<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    propsData<span class=\\\"token punctuation\\\">:</span> props\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`ul li`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeLessThanOrEqual</span><span class=\\\"token punctuation\\\">(</span>\\n      props<span class=\\\"token punctuation\\\">.</span>agents<span class=\\\"token punctuation\\\">.</span>length\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">const</span> renderer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createRenderer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  renderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToString</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span>vm<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Try to aim for 100% coverage on vue component libraries since it is far easier to obtain when writing smaller components and it gives your users confidence beyond the stars and the retweets. I‚Äôll eat my own words though and tell you, full coverage is a shibboleth of OSS, and promises little to the stability of a project.</p>\\n<p>Getting full coverage shouldn‚Äôt be your goal, but more of a ‚Äònice to have‚Äô. Test your code, for the reason that when the PR‚Äôs roll in, you can manage changes more easily. Testing should help you make changes faster.</p>\\n<h2>Add Your Docs + Demo¬†üìñ</h2>\\n<p>Once you publish your package to npm, you can make it easier on your users by giving them a playground to test it out. There are some great REPL‚Äôs out there for playing with javascript such as jsfiddle, codesandbox.io, codepen, or jsbin.com. The trick with using these editors is allowing your library to be consumable from a <code>&#x3C;script></code> tag. Albeit, codesandbox has the advantage of using a module loading via webpack so it‚Äôs more like a real-life app. You can utilize npm package publishing sites such as the <a href=\\\"https://unpkg.com\\\">unpkg.com</a> CDN which will serve up any npm package. In jsfiddle, you can add your unpkg url to the list of resources.</p>\\n<iframe width=\\\"100%\\\" height=\\\"400\\\" src=\\\"//jsfiddle.net/darrenjennings/dugbvezs/embedded/\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<p>Also, go check out Storybook, which gives you a framework for building live coding demos of all the iterations of your component. This gives your api an easy playground for users to click through, and you can quickly see your component in complex/different mutations. You can also debug components in storybook, build it as a static site, and deploy it on your github.io page üíØ. It‚Äôs the future, yo.</p>\\n<h2>Make it fancy¬†üíÖüèª</h2>\\n<p>Make it fancy, a.k.a. user-friendly. Your README.md is your landing page. Give it a little love so that users have a good experience! Your readme should have docs that are understandable, and clean. Think about a first time user who doesn‚Äôt know exactly how to use or install Vue plugins.</p>\\n<ul>\\n<li>Explain WHAT problem the plugin is solving and WHY it stands apart.</li>\\n<li>Create templates for what users/contributors see when they create <a href=\\\"https://github.com/Educents/vue-autosuggest/blob/master/.github/ISSUE_TEMPLATE.md\\\">github issues</a> or <a href=\\\"https://github.com/Educents/vue-autosuggest/blob/master/.github/PULL_REQUEST_TEMPLATE.md\\\">pull requests</a> by creating a ISSUE<em>TEMPLATE.md and a PULL</em>REQUEST_TEMPLATE.md in a¬†.github folder in the root of your repo.</li>\\n<li>Add <a href=\\\"https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-adding-badges-to-your-readme\\\">badges</a>!</li>\\n<li>Incorporate <a href=\\\"https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-adding-badges-to-your-readme\\\">Continuous integration</a> like TravisCI</li>\\n</ul>\\n<p>If you‚Äôre proud of your code, spend the extra time to help others be excited to use it.</p>\\n<h2>üöÄ Publish to¬†npm</h2>\\n<p><code>npm publish</code> it! At Educents, we actively developed our autosuggest plugin in beta, consuming and refining it for our own use case, until we felt it was ready for the world to be released for our public 1.0 release. So don‚Äôt wait to publish, just give your README.md a big ‚ö†Ô∏è warning label if it‚Äôs under active development, and make sure your version is in beta e.g. v0.0.1-beta.1</p>\\n<h2>Share it</h2>\\n<p>Write a <a href=\\\"https://medium.com/@darrenjennings/open-sourcing-your-first-vue-component-5ef015e1f66c\\\">Medium</a> article, tweet about it, submit a PR to awesome-vue, share it with <a href=\\\"https://www.twitter.com/sarah_edo\\\">Sarah Drasner</a> üòú. Why plug your own stuff? Mainly because the more people that use your code, the better it becomes. Or at least that‚Äôs the idea üòÇ If you have a cool component, tweet at me and I‚Äôd love to check it out.</p>\\n<h2>Conclusions</h2>\\n<p>What makes React so much fun is its popularity and inspiration in an ever growing evolution of open source software. Vuejs is doing the same thing! It‚Äôs proving to be a fun and testable framework for composing these reusable building blocks. My hope is that you architect great things, no matter language or framework you‚Äôre in.</p>\\n<p>If you enjoyed reading this, follow me on twitter where my DM‚Äôs are always open‚Ä¶ and of course go checkout <a href=\\\"https://github.com/Educents/vue-autosuggest\\\">vue-autosuggest</a>, and give it some ‚≠êÔ∏è‚Äôs if you like it!</p>\\n<p>Helpful links:</p>\\n<ul>\\n<li><a href=\\\"https://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/\\\">https://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/</a></li>\\n<li><a href=\\\"https://www.manning.com/books/testing-vuejs-applications\\\">https://www.manning.com/books/testing-vuejs-applications</a></li>\\n<li><a href=\\\"https://eddyerburgh.me/unit-test-vue-components-beginners\\\">https://eddyerburgh.me/unit-test-vue-components-beginners</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Open Sourcing My First Vue Component\",\"date\":\"December 01, 2017\"}}},\"pathContext\":{\"path\":\"/open-sourcing-my-first-vue-component/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---open-sourcing-my-first-vue-component-be95edd5789a948f1a65.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Darren Jennings\",\"author\":\"Darren Jennings\"}},\"markdownRemark\":{\"id\":\"/Users/darrenjennings/source/repos/darrenjennings.github.io/src/pages/2017-12-01-first-open-source-vue/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<blockquote>\\n<p><strong>tl;dr</strong> I‚Äôm open sourced vue-autosuggest, and wrote about it. Check out the <a href=\\\"https://medium.com/@darrenjennings/open-sourcing-your-first-vue-component-5ef015e1f66c\\\" target=\\\"_blank\\\">medium post</a> and the <a href=\\\"https://www.github.com/Educents/vue-autosuggest\\\" target=\\\"_blank\\\">source code.</a></p>\\n</blockquote>\\n<img style=\\\"margin-bottom:0;\\\" src=\\\"/vueautosuggest_educents-edd010938a1ef2c17db67a5833d4cc60.gif\\\" class=\\\"shadow\\\" alt=\\\"vue-autosuggest on Educents.\\\"/>\\n<p style=\\\"text-align: center;\\\">\\n<em style=\\\"font-size:0.75em; margin-bottom:1.45rem;\\\">Vue-autosuggest in the wild on <a href=\\\"https://www.educents.com/\\\" target=\\\"_blank\\\">Educents.com</a></em>\\n</p>\\n<p>In case you‚Äôre new to <a href=\\\"https://vuejs.org\\\">Vue</a>, it‚Äôs an awesome javascript front-end framework that makes writing reusable, testable UI components a breeze! I <a href=\\\"https://medium.com/@darrenjennings/data-driven-vue-js-53e84f16e28f\\\">recently wrote</a> about how I love Vue‚Äôs data-driven design and second-to-none documentation. However, I wanted to write about my experience with open sourcing my first Vue component in the spirit of <a href=\\\"https://hacktoberfest.digitalocean.com/stats/darrenjennings\\\">Hacktoberfest</a>. Here‚Äôs what I found helpful traversing the mire.</p>\\n<h2>Before you begin, pick a component you already¬†need!</h2>\\n<p>It‚Äôs always a good idea to contribute to Open Source Software <a href=\\\"https://twitter.com/search?q=%23OSS\\\">#OSS</a> by solving a problem that you already have. As <a href=\\\"https://medium.com/r/?url=https%3A%2F%2Fmxstbr.blog%2F2017%2F02%2Fcreating-open-source-projects%2F\\\">Max Stoiber says</a>, open source is a byproduct of solving problems. If you‚Äôre already building reusable components, why not make them available for everyone and learn some things in the process? If your components seem too tightly coupled to your application structure, maybe it‚Äôs time to ask ‚ÄúWhat do I need to do to open source this?‚Äù At Educents, we built an autosuggest component that would be flexible enough to eventually abstract for general use cases while still solving our real problems‚Ä¶ and then we open-sourced it!</p>\\n<h2>Grab a¬†Template</h2>\\n<p>Look at existing Vue projects for suggested structures for your github project. Here are some mature projects we used as templates when writing a plugin:</p>\\n<ul>\\n<li>For plugins in the wild, checkout Algolia‚Äôs instant search component or Freek Van der Herten/Spatie‚Äôs vue table component</li>\\n<li>For testing help check out <a href=\\\"https://github.com/vuejs/vue-test-utils-jest-example\\\">vue-test-utils-jest-example</a></li>\\n<li>For general OSS project scaffolding, look at Kent C. Dodds‚Äô <a href=\\\"https://github.com/kentcdodds/kcd-scripts\\\">kcd-scripts</a></li>\\n</ul>\\n<p>Of course you should also read the official docs for an overview on how plugins in Vue work.\\nIf you‚Äôre already segmenting your UI library into prop-driven components, then open sourcing a component isn‚Äôt much more than a simple index.js script with an <code>install()</code> method.</p>\\n<p>Here is an example from a fictitious plugin called VueToAKill.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> VueToAKill <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"./VueToAKill.vue\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> VueToAKillLib <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">install</span><span class=\\\"token punctuation\\\">(</span>Vue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">component</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"vue-to-a-kill\\\"</span><span class=\\\"token punctuation\\\">,</span> VueToAKill<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> VueToAKillLib<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> window <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">\\\"undefined\\\"</span> <span class=\\\"token operator\\\">&amp;&amp;</span> window<span class=\\\"token punctuation\\\">.</span>Vue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  window<span class=\\\"token punctuation\\\">.</span>Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>VueToAKillLib<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Build Your Vue Component for the¬†masses</h2>\\n<p>You need to get your component into a single consumable file. Webpack, rollup, something else? Not much to say here except that I was familiar with Webpack so I went that direction. It‚Äôs worth noting that Rollup seems to be more popular as the Vue and React teams both use it to bundle their main libraries.</p>\\n<p>Webpack example partial config (full example config):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>output: {\\n    path: path.resolve(__dirname, \\\"../dist\\\"),\\n    filename: \\\"[name].js\\\",\\n    library: \\\"VueToAKill\\\",\\n    libraryTarget: \\\"umd\\\" // you can build for commonjs also\\n},</code></pre>\\n      </div>\\n<p>Naming the libary e.g. VueToAKill will give you the ability to reference the library outside of a build tool, such as JSFiddle, or you can autoload the plugin for users inside your install load (as demonstrated in index.js Gist code block on lines 11‚Äì13 above). If you include it in a script tag, you can simple load it into your Vue app like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>VueToAKill<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Once your lib is on npm, loading the plugin as a module in your build tools (such as webpack), is as simple as installing and importing:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> VueToAKill <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue-to-a-kill'</span><span class=\\\"token punctuation\\\">;</span> \\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>VueToAKill<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Test Your Vue Component</h2>\\n<p>Vue testing has a great library, vue-test-utils (recently migrated from the popular lib avioraz), and it is being actively developed. While still in beta at the time of this article, we found it worked well and gives you a testing tool belt akin to Enzyme (for React ‚ù§Ô∏è), and can be easily integrated into existing testing tools such as Jest or Mocha. It has shallow mounting of components, and server side rendered snapshots for üì∏ snapshot testing. We even filed an issue we discovered while testing and the maintainer responded within a few hours with a commit fixing the issue.</p>\\n<p>Check out an example test on our VueToAKill component. I‚Äôm rendering the component, and checking that the agents prop I‚Äôm passing is rendered in the result Vue html with the desired number of <code>&#x3C;li></code> tags.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> shallow <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"vue-test-utils\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createRenderer <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"vue-server-renderer\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> VueToAKill <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"../src/VueToAKill.vue\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  agents<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'James Bond'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Alec Trevelyan'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'M'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Q'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  licenseToKill<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"can mount\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> props <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> defaultProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  props<span class=\\\"token punctuation\\\">.</span>licenseToKill <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> wrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">shallow</span><span class=\\\"token punctuation\\\">(</span>VueToAKill<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    propsData<span class=\\\"token punctuation\\\">:</span> props\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`ul li`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeLessThanOrEqual</span><span class=\\\"token punctuation\\\">(</span>\\n      props<span class=\\\"token punctuation\\\">.</span>agents<span class=\\\"token punctuation\\\">.</span>length\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token keyword\\\">const</span> renderer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createRenderer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  renderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">renderToString</span><span class=\\\"token punctuation\\\">(</span>wrapper<span class=\\\"token punctuation\\\">.</span>vm<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Try to aim for 100% coverage on vue component libraries since it is far easier to obtain when writing smaller components and it gives your users confidence beyond the stars and the retweets. I‚Äôll eat my own words though and tell you, full coverage is a shibboleth of OSS, and promises little to the stability of a project.</p>\\n<p>Getting full coverage shouldn‚Äôt be your goal, but more of a ‚Äònice to have‚Äô. Test your code, for the reason that when the PR‚Äôs roll in, you can manage changes more easily. Testing should help you make changes faster.</p>\\n<h2>Add Your Docs + Demo¬†üìñ</h2>\\n<p>Once you publish your package to npm, you can make it easier on your users by giving them a playground to test it out. There are some great REPL‚Äôs out there for playing with javascript such as jsfiddle, codesandbox.io, codepen, or jsbin.com. The trick with using these editors is allowing your library to be consumable from a <code>&#x3C;script></code> tag. Albeit, codesandbox has the advantage of using a module loading via webpack so it‚Äôs more like a real-life app. You can utilize npm package publishing sites such as the <a href=\\\"https://unpkg.com\\\">unpkg.com</a> CDN which will serve up any npm package. In jsfiddle, you can add your unpkg url to the list of resources.</p>\\n<iframe width=\\\"100%\\\" height=\\\"400\\\" src=\\\"//jsfiddle.net/darrenjennings/dugbvezs/embedded/\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<p>Also, go check out Storybook, which gives you a framework for building live coding demos of all the iterations of your component. This gives your api an easy playground for users to click through, and you can quickly see your component in complex/different mutations. You can also debug components in storybook, build it as a static site, and deploy it on your github.io page üíØ. It‚Äôs the future, yo.</p>\\n<h2>Make it fancy¬†üíÖüèª</h2>\\n<p>Make it fancy, a.k.a. user-friendly. Your README.md is your landing page. Give it a little love so that users have a good experience! Your readme should have docs that are understandable, and clean. Think about a first time user who doesn‚Äôt know exactly how to use or install Vue plugins.</p>\\n<ul>\\n<li>Explain WHAT problem the plugin is solving and WHY it stands apart.</li>\\n<li>Create templates for what users/contributors see when they create <a href=\\\"https://github.com/Educents/vue-autosuggest/blob/master/.github/ISSUE_TEMPLATE.md\\\">github issues</a> or <a href=\\\"https://github.com/Educents/vue-autosuggest/blob/master/.github/PULL_REQUEST_TEMPLATE.md\\\">pull requests</a> by creating a ISSUE<em>TEMPLATE.md and a PULL</em>REQUEST_TEMPLATE.md in a¬†.github folder in the root of your repo.</li>\\n<li>Add <a href=\\\"https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-adding-badges-to-your-readme\\\">badges</a>!</li>\\n<li>Incorporate <a href=\\\"https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-adding-badges-to-your-readme\\\">Continuous integration</a> like TravisCI</li>\\n</ul>\\n<p>If you‚Äôre proud of your code, spend the extra time to help others be excited to use it.</p>\\n<h2>üöÄ Publish to¬†npm</h2>\\n<p><code>npm publish</code> it! At Educents, we actively developed our autosuggest plugin in beta, consuming and refining it for our own use case, until we felt it was ready for the world to be released for our public 1.0 release. So don‚Äôt wait to publish, just give your README.md a big ‚ö†Ô∏è warning label if it‚Äôs under active development, and make sure your version is in beta e.g. v0.0.1-beta.1</p>\\n<h2>Share it</h2>\\n<p>Write a <a href=\\\"https://medium.com/@darrenjennings/open-sourcing-your-first-vue-component-5ef015e1f66c\\\">Medium</a> article, tweet about it, submit a PR to awesome-vue, share it with <a href=\\\"https://www.twitter.com/sarah_edo\\\">Sarah Drasner</a> üòú. Why plug your own stuff? Mainly because the more people that use your code, the better it becomes. Or at least that‚Äôs the idea üòÇ If you have a cool component, tweet at me and I‚Äôd love to check it out.</p>\\n<h2>Conclusions</h2>\\n<p>What makes React so much fun is its popularity and inspiration in an ever growing evolution of open source software. Vuejs is doing the same thing! It‚Äôs proving to be a fun and testable framework for composing these reusable building blocks. My hope is that you architect great things, no matter language or framework you‚Äôre in.</p>\\n<p>If you enjoyed reading this, follow me on twitter where my DM‚Äôs are always open‚Ä¶ and of course go checkout <a href=\\\"https://github.com/Educents/vue-autosuggest\\\">vue-autosuggest</a>, and give it some ‚≠êÔ∏è‚Äôs if you like it!</p>\\n<p>Helpful links:</p>\\n<ul>\\n<li><a href=\\\"https://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/\\\">https://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/</a></li>\\n<li><a href=\\\"https://www.manning.com/books/testing-vuejs-applications\\\">https://www.manning.com/books/testing-vuejs-applications</a></li>\\n<li><a href=\\\"https://eddyerburgh.me/unit-test-vue-components-beginners\\\">https://eddyerburgh.me/unit-test-vue-components-beginners</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Open Sourcing My First Vue Component\",\"date\":\"December 01, 2017\"}}},\"pathContext\":{\"path\":\"/open-sourcing-my-first-vue-component/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/open-sourcing-my-first-vue-component.json\n// module id = 488\n// module chunks = 39229934126351"],"sourceRoot":""}