webpackJsonp([39229934126351],{377:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Darren Jennings",author:"Darren Jennings"}},markdownRemark:{id:"/Users/darrenjennings/source/repos/darrenjennings.github.io/src/pages/2017-12-01-first-open-source-vue/index.md absPath of file >>> MarkdownRemark",html:'<blockquote>\n<p><strong>tl;dr</strong> I open sourced vue-autosuggest, and wrote about it. Check out the\n<a href="https://medium.com/@darrenjennings/open-sourcing-your-first-vue-component-5ef015e1f66c" target="_blank">medium\npost</a> and the\n<a href="https://www.github.com/Educents/vue-autosuggest" target="_blank">source\ncode.</a></p>\n</blockquote>\n<img style="margin-bottom:0;" src="/vueautosuggest_educents-edd010938a1ef2c17db67a5833d4cc60.gif" class="shadow tv" alt="vue-autosuggest on Educents."/>\n<p style="text-align: center;">\n<em style="font-size:0.75em; margin-bottom:1.45rem;">Vue-autosuggest in the wild on <a href="https://www.educents.com/" target="_blank">Educents.com</a></em>\n</p>\n<p>In case you‚Äôre new to <a href="https://vuejs.org">Vue</a>, it‚Äôs an awesome javascript\nfront-end framework that makes writing reusable, testable UI components a\nbreeze! I\n<a href="https://medium.com/@darrenjennings/data-driven-vue-js-53e84f16e28f">recently wrote</a>\nabout how I love Vue‚Äôs data-driven design and second-to-none documentation.\nHowever, I wanted to write about my experience with open sourcing my first Vue\ncomponent in the spirit of\n<a href="https://hacktoberfest.digitalocean.com/stats/darrenjennings">Hacktoberfest</a>.\nHere‚Äôs what I found helpful traversing the mire.</p>\n<h2>Before you begin, pick a component you already need!</h2>\n<p>It‚Äôs always a good idea to contribute to Open Source Software\n<a href="https://twitter.com/search?q=%23OSS">#OSS</a> by solving a problem that you\nalready have. As\n<a href="https://medium.com/r/?url=https%3A%2F%2Fmxstbr.blog%2F2017%2F02%2Fcreating-open-source-projects%2F">Max Stoiber says</a>,\nopen source is a byproduct of solving problems. If you‚Äôre already building\nreusable components, why not make them available for everyone and learn some\nthings in the process? If your components seem too tightly coupled to your\napplication structure, maybe it‚Äôs time to ask ‚ÄúWhat do I need to do to open\nsource this?‚Äù At Educents, we built an autosuggest component that would be\nflexible enough to eventually abstract for general use cases while still solving\nour real problems‚Ä¶ and then we open-sourced it!</p>\n<h2>Grab a Template</h2>\n<p>Look at existing Vue projects for suggested structures for your github project.\nHere are some mature projects we used as templates when writing a plugin:</p>\n<ul>\n<li>For plugins in the wild, checkout Algolia‚Äôs instant search component or Freek\nVan der Herten/Spatie‚Äôs vue table component</li>\n<li>For testing help check out\n<a href="https://github.com/vuejs/vue-test-utils-jest-example">vue-test-utils-jest-example</a></li>\n<li>For general OSS project scaffolding, look at Kent C. Dodds‚Äô\n<a href="https://github.com/kentcdodds/kcd-scripts">kcd-scripts</a></li>\n</ul>\n<p>Of course you should also read the official docs for an overview on how plugins\nin Vue work. If you‚Äôre already segmenting your UI library into prop-driven\ncomponents, then open sourcing a component isn‚Äôt much more than a simple\nindex.js script with an <code>install()</code> method.</p>\n<p>Here is an example from a fictitious plugin called VueToAKill.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> VueToAKill <span class="token keyword">from</span> <span class="token string">\'./VueToAKill.vue\'</span>\n\n<span class="token keyword">const</span> VueToAKillLib <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">install</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'vue-to-a-kill\'</span><span class="token punctuation">,</span> VueToAKill<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> VueToAKillLib\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueToAKillLib<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Build Your Vue Component for the masses</h2>\n<p>You need to get your component into a single consumable file. Webpack, rollup,\nsomething else? Not much to say here except that I was familiar with Webpack so\nI went that direction. It‚Äôs worth noting that Rollup seems to be more popular as\nthe Vue and React teams both use it to bundle their main libraries.</p>\n<p>Webpack example partial config (full example config):</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>output: {\n    path: path.resolve(__dirname, "../dist"),\n    filename: "[name].js",\n    library: "VueToAKill",\n    libraryTarget: "umd" // you can build for commonjs also\n},</code></pre>\n      </div>\n<p>Naming the libary e.g. VueToAKill will give you the ability to reference the\nlibrary outside of a build tool, such as JSFiddle, or you can autoload the\nplugin for users inside your install load (as demonstrated in index.js Gist code\nblock on lines 11‚Äì13 above). If you include it in a script tag, you can simple\nload it into your Vue app like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>VueToAKill<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Once your lib is on npm, loading the plugin as a module in your build tools\n(such as webpack), is as simple as installing and importing:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> VueToAKill <span class="token keyword">from</span> <span class="token string">\'vue-to-a-kill\'</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueToAKill<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>Test Your Vue Component</h2>\n<p>Vue testing has a great library, vue-test-utils (recently migrated from the\npopular lib avioraz), and it is being actively developed. While still in beta at\nthe time of this article, we found it worked well and gives you a testing tool\nbelt akin to Enzyme (for React ‚ù§Ô∏è), and can be easily integrated into existing\ntesting tools such as Jest or Mocha. It has shallow mounting of components, and\nserver side rendered snapshots for üì∏ snapshot testing. We even filed an issue\nwe discovered while testing and the maintainer responded within a few hours with\na commit fixing the issue.</p>\n<p>Check out an example test on our VueToAKill component. I‚Äôm rendering the\ncomponent, and checking that the agents prop I‚Äôm passing is rendered in the\nresult Vue html with the desired number of <code>&#x3C;li></code> tags.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vue-test-utils\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vue-server-renderer\'</span>\n\n<span class="token keyword">import</span> VueToAKill <span class="token keyword">from</span> <span class="token string">\'../src/VueToAKill.vue\'</span>\n\n<span class="token keyword">const</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  agents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'James Bond\'</span><span class="token punctuation">,</span> <span class="token string">\'Alec Trevelyan\'</span><span class="token punctuation">,</span> <span class="token string">\'M\'</span><span class="token punctuation">,</span> <span class="token string">\'Q\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  licenseToKill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'can mount\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaultProps<span class="token punctuation">)</span>\n  props<span class="token punctuation">.</span>licenseToKill <span class="token operator">=</span> <span class="token boolean">false</span>\n\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>VueToAKill<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    propsData<span class="token punctuation">:</span> props<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`ul li`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThanOrEqual</span><span class="token punctuation">(</span>\n    props<span class="token punctuation">.</span>agents<span class="token punctuation">.</span>length\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Try to aim for 100% coverage on vue component libraries since it is far easier\nto obtain when writing smaller components and it gives your users confidence\nbeyond the stars and the retweets. I‚Äôll eat my own words though and tell you,\nfull coverage is a shibboleth of OSS, and promises little to the stability of a\nproject.</p>\n<p>Getting full coverage shouldn‚Äôt be your goal, but more of a ‚Äònice to have‚Äô. Test\nyour code, for the reason that when the PR‚Äôs roll in, you can manage changes\nmore easily. Testing should help you make changes faster.</p>\n<h2>Add Your Docs + Demo üìñ</h2>\n<p>Once you publish your package to npm, you can make it easier on your users by\ngiving them a playground to test it out. There are some great REPL‚Äôs out there\nfor playing with javascript such as jsfiddle, codesandbox.io, codepen, or\njsbin.com. The trick with using these editors is allowing your library to be\nconsumable from a <code>&#x3C;script></code> tag. Albeit, codesandbox has the advantage of using\na module loading via webpack so it‚Äôs more like a real-life app. You can utilize\nnpm package publishing sites such as the\n<a href="https://unpkg.com">unpkg.com</a> CDN which will serve up any npm\npackage. In jsfiddle, you can add your unpkg url to the list of resources.</p>\n<iframe width="100%" height="400" src="//jsfiddle.net/darrenjennings/dugbvezs/embedded/" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe>\n<p>Also, go check out Storybook, which gives you a framework for building live\ncoding demos of all the iterations of your component. This gives your api an\neasy playground for users to click through, and you can quickly see your\ncomponent in complex/different mutations. You can also debug components in\nstorybook, build it as a static site, and deploy it on your github.io page üíØ.\nIt‚Äôs the future, yo.</p>\n<h2>Make it fancy üíÖüèª</h2>\n<p>Make it fancy, a.k.a. user-friendly. Your README.md is your landing page. Give\nit a little love so that users have a good experience! Your readme should have\ndocs that are understandable, and clean. Think about a first time user who\ndoesn‚Äôt know exactly how to use or install Vue plugins.</p>\n<ul>\n<li>Explain WHAT problem the plugin is solving and WHY it stands apart.</li>\n<li>Create templates for what users/contributors see when they create\n<a href="https://github.com/Educents/vue-autosuggest/blob/master/.github/ISSUE_TEMPLATE.md">github issues</a>\nor\n<a href="https://github.com/Educents/vue-autosuggest/blob/master/.github/PULL_REQUEST_TEMPLATE.md">pull requests</a>\nby creating a ISSUE<em>TEMPLATE.md and a PULL</em>REQUEST_TEMPLATE.md in a .github\nfolder in the root of your repo.</li>\n<li>Add\n<a href="https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-adding-badges-to-your-readme">badges</a>!</li>\n<li>Incorporate\n<a href="https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-adding-badges-to-your-readme">Continuous integration</a>\nlike TravisCI</li>\n</ul>\n<p>If you‚Äôre proud of your code, spend the extra time to help others be excited to\nuse it.</p>\n<h2>üöÄ Publish to npm</h2>\n<p><code>npm publish</code> it! At Educents, we actively developed our autosuggest plugin in\nbeta, consuming and refining it for our own use case, until we felt it was ready\nfor the world to be released for our public 1.0 release. So don‚Äôt wait to\npublish, just give your README.md a big ‚ö†Ô∏è warning label if it‚Äôs under active\ndevelopment, and make sure your version is in beta e.g. v0.0.1-beta.1</p>\n<h2>Share it</h2>\n<p>Write a\n<a href="https://medium.com/@darrenjennings/open-sourcing-your-first-vue-component-5ef015e1f66c">Medium</a>\narticle, tweet about it, submit a PR to awesome-vue, share it with\n<a href="https://www.twitter.com/sarah_edo">Sarah Drasner</a> üòú. Why plug your own stuff?\nMainly because the more people that use your code, the better it becomes. Or at\nleast that‚Äôs the idea üòÇ If you have a cool component, tweet at me and I‚Äôd love\nto check it out.</p>\n<h2>Conclusions</h2>\n<p>What makes React so much fun is its popularity and inspiration in an ever\ngrowing evolution of open source software. Vuejs is doing the same thing! It‚Äôs\nproving to be a fun and testable framework for composing these reusable building\nblocks. My hope is that you architect great things, no matter language or\nframework you‚Äôre in.</p>\n<p>If you enjoyed reading this, follow me on twitter where my DM‚Äôs are always open‚Ä¶\nand of course go checkout\n<a href="https://github.com/Educents/vue-autosuggest">vue-autosuggest</a>, and give it some\n‚≠êÔ∏è‚Äôs if you like it!</p>\n<p>Helpful links:</p>\n<ul>\n<li><a href="https://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/">https://alexjoverm.github.io/2017/08/21/Write-the-first-Vue-js-Component-Unit-Test-in-Jest/</a></li>\n<li><a href="https://www.manning.com/books/testing-vuejs-applications">https://www.manning.com/books/testing-vuejs-applications</a></li>\n<li><a href="https://eddyerburgh.me/unit-test-vue-components-beginners">https://eddyerburgh.me/unit-test-vue-components-beginners</a></li>\n</ul>',frontmatter:{title:"Open Sourcing My First Vue Component",date:"December 01, 2017"}}},pathContext:{path:"/open-sourcing-my-first-vue-component/"}}}});
//# sourceMappingURL=path---open-sourcing-my-first-vue-component-348e48f8ea99884e4132.js.map